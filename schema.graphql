# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"Indicates exactly one field must be supplied and this field must not be `null`."
directive @oneOf on INPUT_OBJECT

union GenericMorph = ComponentHomepageHeader | ComponentHomepageIntro | ComponentHomepageTrust | ComponentSharedMetaSocial | ComponentSharedSeo | Homepage | I18NLocale | ReviewWorkflowsWorkflow | ReviewWorkflowsWorkflowStage | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type ComponentHomepageHeader {
    content: String
    id: ID!
    title: String
}

type ComponentHomepageIntro {
    content: String
    id: ID!
    image: UploadFile
    title: String
}

type ComponentHomepageTrust {
    description: JSON
    id: ID!
    screenshot(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UploadFile]!
    screenshot_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
    title: String
    website: String
}

type ComponentSharedMetaSocial {
    description: String!
    id: ID!
    image: UploadFile
    socialNetwork: ENUM_COMPONENTSHAREDMETASOCIAL_SOCIALNETWORK!
    title: String!
}

type ComponentSharedSeo {
    canonicalURL: String
    id: ID!
    keywords: String
    metaDescription: String!
    metaImage: UploadFile
    metaRobots: String
    metaSocial(filters: ComponentSharedMetaSocialFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSharedMetaSocial]
    metaTitle: String!
    metaViewport: String
    structuredData: JSON
}

type DeleteMutationResponse {
    documentId: ID!
}

type Homepage {
    createdAt: DateTime
    documentId: ID!
    header: ComponentHomepageHeader
    intro(filters: ComponentHomepageIntroFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentHomepageIntro]
    publishedAt: DateTime
    seo: ComponentSharedSeo
    trust(filters: ComponentHomepageTrustFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentHomepageTrust]
    updatedAt: DateTime
}

type I18NLocale {
    code: String
    createdAt: DateTime
    documentId: ID!
    name: String
    publishedAt: DateTime
    updatedAt: DateTime
}

type I18NLocaleEntityResponseCollection {
    nodes: [I18NLocale!]!
    pageInfo: Pagination!
}

type Mutation {
    "Change user password. Confirm with the current password."
    changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
    createReviewWorkflowsWorkflow(data: ReviewWorkflowsWorkflowInput!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflow
    createReviewWorkflowsWorkflowStage(data: ReviewWorkflowsWorkflowStageInput!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStage
    "Create a new role"
    createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload
    "Create a new user"
    createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
    deleteHomepage: DeleteMutationResponse
    deleteReviewWorkflowsWorkflow(documentId: ID!): DeleteMutationResponse
    deleteReviewWorkflowsWorkflowStage(documentId: ID!): DeleteMutationResponse
    deleteUploadFile(id: ID!): UploadFile
    "Delete an existing role"
    deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload
    "Delete an existing user"
    deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
    "Confirm an email users email address"
    emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
    "Request a reset password token"
    forgotPassword(email: String!): UsersPermissionsPasswordPayload
    login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
    "Register a user"
    register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
    "Reset user password. Confirm with a code (resetToken from forgotPassword)"
    resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
    updateHomepage(data: HomepageInput!, status: PublicationStatus = PUBLISHED): Homepage
    updateReviewWorkflowsWorkflow(data: ReviewWorkflowsWorkflowInput!, documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflow
    updateReviewWorkflowsWorkflowStage(data: ReviewWorkflowsWorkflowStageInput!, documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStage
    updateUploadFile(id: ID!, info: FileInfoInput): UploadFile!
    "Update an existing role"
    updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload
    "Update an existing user"
    updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
}

type Pagination {
    page: Int!
    pageCount: Int!
    pageSize: Int!
    total: Int!
}

type Query {
    homepage(status: PublicationStatus = PUBLISHED): Homepage
    i18NLocale(documentId: ID!, status: PublicationStatus = PUBLISHED): I18NLocale
    i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [I18NLocale]!
    i18NLocales_connection(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): I18NLocaleEntityResponseCollection
    me: UsersPermissionsMe
    reviewWorkflowsWorkflow(documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflow
    reviewWorkflowsWorkflowStage(documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStage
    reviewWorkflowsWorkflowStages(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [ReviewWorkflowsWorkflowStage]!
    reviewWorkflowsWorkflowStages_connection(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStageEntityResponseCollection
    reviewWorkflowsWorkflows(filters: ReviewWorkflowsWorkflowFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [ReviewWorkflowsWorkflow]!
    reviewWorkflowsWorkflows_connection(filters: ReviewWorkflowsWorkflowFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowEntityResponseCollection
    uploadFile(documentId: ID!, status: PublicationStatus = PUBLISHED): UploadFile
    uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UploadFile]!
    uploadFiles_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UploadFileEntityResponseCollection
    usersPermissionsRole(documentId: ID!, status: PublicationStatus = PUBLISHED): UsersPermissionsRole
    usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UsersPermissionsRole]!
    usersPermissionsRoles_connection(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UsersPermissionsRoleEntityResponseCollection
    usersPermissionsUser(documentId: ID!, status: PublicationStatus = PUBLISHED): UsersPermissionsUser
    usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): [UsersPermissionsUser]!
    usersPermissionsUsers_connection(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], status: PublicationStatus = PUBLISHED): UsersPermissionsUserEntityResponseCollection
}

type ReviewWorkflowsWorkflow {
    contentTypes: JSON!
    createdAt: DateTime
    documentId: ID!
    name: String!
    publishedAt: DateTime
    stages(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ReviewWorkflowsWorkflowStage]!
    stages_connection(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ReviewWorkflowsWorkflowStageRelationResponseCollection
    updatedAt: DateTime
}

type ReviewWorkflowsWorkflowEntityResponseCollection {
    nodes: [ReviewWorkflowsWorkflow!]!
    pageInfo: Pagination!
}

type ReviewWorkflowsWorkflowStage {
    color: String
    createdAt: DateTime
    documentId: ID!
    name: String
    publishedAt: DateTime
    updatedAt: DateTime
    workflow: ReviewWorkflowsWorkflow
}

type ReviewWorkflowsWorkflowStageEntityResponseCollection {
    nodes: [ReviewWorkflowsWorkflowStage!]!
    pageInfo: Pagination!
}

type ReviewWorkflowsWorkflowStageRelationResponseCollection {
    nodes: [ReviewWorkflowsWorkflowStage!]!
}

type UploadFile {
    alternativeText: String
    caption: String
    createdAt: DateTime
    documentId: ID!
    ext: String
    formats: JSON
    hash: String!
    height: Int
    mime: String!
    name: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    publishedAt: DateTime
    related: [GenericMorph]
    size: Float!
    updatedAt: DateTime
    url: String!
    width: Int
}

type UploadFileEntityResponseCollection {
    nodes: [UploadFile!]!
    pageInfo: Pagination!
}

type UploadFileRelationResponseCollection {
    nodes: [UploadFile!]!
}

type UsersPermissionsCreateRolePayload {
    ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
    ok: Boolean!
}

type UsersPermissionsLoginPayload {
    jwt: String
    user: UsersPermissionsMe!
}

type UsersPermissionsMe {
    blocked: Boolean
    confirmed: Boolean
    email: String
    id: ID!
    role: UsersPermissionsMeRole
    username: String!
}

type UsersPermissionsMeRole {
    description: String
    id: ID!
    name: String!
    type: String
}

type UsersPermissionsPasswordPayload {
    ok: Boolean!
}

type UsersPermissionsPermission {
    action: String!
    createdAt: DateTime
    documentId: ID!
    publishedAt: DateTime
    role: UsersPermissionsRole
    updatedAt: DateTime
}

type UsersPermissionsPermissionRelationResponseCollection {
    nodes: [UsersPermissionsPermission!]!
}

type UsersPermissionsRole {
    createdAt: DateTime
    description: String
    documentId: ID!
    name: String!
    permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UsersPermissionsPermission]!
    permissions_connection(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
    publishedAt: DateTime
    type: String
    updatedAt: DateTime
    users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [UsersPermissionsUser]!
    users_connection(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntityResponseCollection {
    nodes: [UsersPermissionsRole!]!
    pageInfo: Pagination!
}

type UsersPermissionsUpdateRolePayload {
    ok: Boolean!
}

type UsersPermissionsUser {
    blocked: Boolean
    confirmed: Boolean
    createdAt: DateTime
    documentId: ID!
    email: String!
    provider: String
    publishedAt: DateTime
    role: UsersPermissionsRole
    updatedAt: DateTime
    username: String!
}

type UsersPermissionsUserEntityResponse {
    data: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponseCollection {
    nodes: [UsersPermissionsUser!]!
    pageInfo: Pagination!
}

type UsersPermissionsUserRelationResponseCollection {
    nodes: [UsersPermissionsUser!]!
}

enum ENUM_COMPONENTSHAREDMETASOCIAL_SOCIALNETWORK {
    Facebook
    Twitter
}

enum PublicationStatus {
    DRAFT
    PUBLISHED
}

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

input BooleanFilterInput {
    and: [Boolean]
    between: [Boolean]
    contains: Boolean
    containsi: Boolean
    endsWith: Boolean
    eq: Boolean
    eqi: Boolean
    gt: Boolean
    gte: Boolean
    in: [Boolean]
    lt: Boolean
    lte: Boolean
    ne: Boolean
    nei: Boolean
    not: BooleanFilterInput
    notContains: Boolean
    notContainsi: Boolean
    notIn: [Boolean]
    notNull: Boolean
    null: Boolean
    or: [Boolean]
    startsWith: Boolean
}

input ComponentHomepageHeaderInput {
    content: String
    id: ID
    title: String
}

input ComponentHomepageIntroFiltersInput {
    and: [ComponentHomepageIntroFiltersInput]
    content: StringFilterInput
    not: ComponentHomepageIntroFiltersInput
    or: [ComponentHomepageIntroFiltersInput]
    title: StringFilterInput
}

input ComponentHomepageIntroInput {
    content: String
    id: ID
    image: ID
    title: String
}

input ComponentHomepageTrustFiltersInput {
    and: [ComponentHomepageTrustFiltersInput]
    description: JSONFilterInput
    not: ComponentHomepageTrustFiltersInput
    or: [ComponentHomepageTrustFiltersInput]
    title: StringFilterInput
    website: StringFilterInput
}

input ComponentHomepageTrustInput {
    description: JSON
    id: ID
    screenshot: [ID]
    title: String
    website: String
}

input ComponentSharedMetaSocialFiltersInput {
    and: [ComponentSharedMetaSocialFiltersInput]
    description: StringFilterInput
    not: ComponentSharedMetaSocialFiltersInput
    or: [ComponentSharedMetaSocialFiltersInput]
    socialNetwork: StringFilterInput
    title: StringFilterInput
}

input ComponentSharedMetaSocialInput {
    description: String
    id: ID
    image: ID
    socialNetwork: ENUM_COMPONENTSHAREDMETASOCIAL_SOCIALNETWORK
    title: String
}

input ComponentSharedSeoInput {
    canonicalURL: String
    id: ID
    keywords: String
    metaDescription: String
    metaImage: ID
    metaRobots: String
    metaSocial: [ComponentSharedMetaSocialInput]
    metaTitle: String
    metaViewport: String
    structuredData: JSON
}

input DateTimeFilterInput {
    and: [DateTime]
    between: [DateTime]
    contains: DateTime
    containsi: DateTime
    endsWith: DateTime
    eq: DateTime
    eqi: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime]
    lt: DateTime
    lte: DateTime
    ne: DateTime
    nei: DateTime
    not: DateTimeFilterInput
    notContains: DateTime
    notContainsi: DateTime
    notIn: [DateTime]
    notNull: Boolean
    null: Boolean
    or: [DateTime]
    startsWith: DateTime
}

input FileInfoInput {
    alternativeText: String
    caption: String
    name: String
}

input FloatFilterInput {
    and: [Float]
    between: [Float]
    contains: Float
    containsi: Float
    endsWith: Float
    eq: Float
    eqi: Float
    gt: Float
    gte: Float
    in: [Float]
    lt: Float
    lte: Float
    ne: Float
    nei: Float
    not: FloatFilterInput
    notContains: Float
    notContainsi: Float
    notIn: [Float]
    notNull: Boolean
    null: Boolean
    or: [Float]
    startsWith: Float
}

input HomepageInput {
    header: ComponentHomepageHeaderInput
    intro: [ComponentHomepageIntroInput]
    locale: String
    publishedAt: DateTime
    seo: ComponentSharedSeoInput
    trust: [ComponentHomepageTrustInput]
}

input I18NLocaleFiltersInput {
    and: [I18NLocaleFiltersInput]
    code: StringFilterInput
    createdAt: DateTimeFilterInput
    documentId: IDFilterInput
    locale: StringFilterInput
    localizations: I18NLocaleFiltersInput
    name: StringFilterInput
    not: I18NLocaleFiltersInput
    or: [I18NLocaleFiltersInput]
    publishedAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
}

input IDFilterInput {
    and: [ID]
    between: [ID]
    contains: ID
    containsi: ID
    endsWith: ID
    eq: ID
    eqi: ID
    gt: ID
    gte: ID
    in: [ID]
    lt: ID
    lte: ID
    ne: ID
    nei: ID
    not: IDFilterInput
    notContains: ID
    notContainsi: ID
    notIn: [ID]
    notNull: Boolean
    null: Boolean
    or: [ID]
    startsWith: ID
}

input IntFilterInput {
    and: [Int]
    between: [Int]
    contains: Int
    containsi: Int
    endsWith: Int
    eq: Int
    eqi: Int
    gt: Int
    gte: Int
    in: [Int]
    lt: Int
    lte: Int
    ne: Int
    nei: Int
    not: IntFilterInput
    notContains: Int
    notContainsi: Int
    notIn: [Int]
    notNull: Boolean
    null: Boolean
    or: [Int]
    startsWith: Int
}

input JSONFilterInput {
    and: [JSON]
    between: [JSON]
    contains: JSON
    containsi: JSON
    endsWith: JSON
    eq: JSON
    eqi: JSON
    gt: JSON
    gte: JSON
    in: [JSON]
    lt: JSON
    lte: JSON
    ne: JSON
    nei: JSON
    not: JSONFilterInput
    notContains: JSON
    notContainsi: JSON
    notIn: [JSON]
    notNull: Boolean
    null: Boolean
    or: [JSON]
    startsWith: JSON
}

input PaginationArg {
    limit: Int
    page: Int
    pageSize: Int
    start: Int
}

input ReviewWorkflowsWorkflowFiltersInput {
    and: [ReviewWorkflowsWorkflowFiltersInput]
    contentTypes: JSONFilterInput
    createdAt: DateTimeFilterInput
    documentId: IDFilterInput
    locale: StringFilterInput
    localizations: ReviewWorkflowsWorkflowFiltersInput
    name: StringFilterInput
    not: ReviewWorkflowsWorkflowFiltersInput
    or: [ReviewWorkflowsWorkflowFiltersInput]
    publishedAt: DateTimeFilterInput
    stages: ReviewWorkflowsWorkflowStageFiltersInput
    updatedAt: DateTimeFilterInput
}

input ReviewWorkflowsWorkflowInput {
    contentTypes: JSON
    locale: String
    name: String
    publishedAt: DateTime
    stages: [ID]
}

input ReviewWorkflowsWorkflowStageFiltersInput {
    and: [ReviewWorkflowsWorkflowStageFiltersInput]
    color: StringFilterInput
    createdAt: DateTimeFilterInput
    documentId: IDFilterInput
    locale: StringFilterInput
    localizations: ReviewWorkflowsWorkflowStageFiltersInput
    name: StringFilterInput
    not: ReviewWorkflowsWorkflowStageFiltersInput
    or: [ReviewWorkflowsWorkflowStageFiltersInput]
    publishedAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    workflow: ReviewWorkflowsWorkflowFiltersInput
}

input ReviewWorkflowsWorkflowStageInput {
    color: String
    locale: String
    name: String
    publishedAt: DateTime
    workflow: ID
}

input StringFilterInput {
    and: [String]
    between: [String]
    contains: String
    containsi: String
    endsWith: String
    eq: String
    eqi: String
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nei: String
    not: StringFilterInput
    notContains: String
    notContainsi: String
    notIn: [String]
    notNull: Boolean
    null: Boolean
    or: [String]
    startsWith: String
}

input UploadFileFiltersInput {
    alternativeText: StringFilterInput
    and: [UploadFileFiltersInput]
    caption: StringFilterInput
    createdAt: DateTimeFilterInput
    documentId: IDFilterInput
    ext: StringFilterInput
    folderPath: StringFilterInput
    formats: JSONFilterInput
    hash: StringFilterInput
    height: IntFilterInput
    locale: StringFilterInput
    localizations: UploadFileFiltersInput
    mime: StringFilterInput
    name: StringFilterInput
    not: UploadFileFiltersInput
    or: [UploadFileFiltersInput]
    previewUrl: StringFilterInput
    provider: StringFilterInput
    provider_metadata: JSONFilterInput
    publishedAt: DateTimeFilterInput
    size: FloatFilterInput
    updatedAt: DateTimeFilterInput
    url: StringFilterInput
    width: IntFilterInput
}

input UsersPermissionsLoginInput {
    identifier: String!
    password: String!
    provider: String! = "local"
}

input UsersPermissionsPermissionFiltersInput {
    action: StringFilterInput
    and: [UsersPermissionsPermissionFiltersInput]
    createdAt: DateTimeFilterInput
    documentId: IDFilterInput
    locale: StringFilterInput
    localizations: UsersPermissionsPermissionFiltersInput
    not: UsersPermissionsPermissionFiltersInput
    or: [UsersPermissionsPermissionFiltersInput]
    publishedAt: DateTimeFilterInput
    role: UsersPermissionsRoleFiltersInput
    updatedAt: DateTimeFilterInput
}

input UsersPermissionsRegisterInput {
    email: String!
    password: String!
    username: String!
}

input UsersPermissionsRoleFiltersInput {
    and: [UsersPermissionsRoleFiltersInput]
    createdAt: DateTimeFilterInput
    description: StringFilterInput
    documentId: IDFilterInput
    locale: StringFilterInput
    localizations: UsersPermissionsRoleFiltersInput
    name: StringFilterInput
    not: UsersPermissionsRoleFiltersInput
    or: [UsersPermissionsRoleFiltersInput]
    permissions: UsersPermissionsPermissionFiltersInput
    publishedAt: DateTimeFilterInput
    type: StringFilterInput
    updatedAt: DateTimeFilterInput
    users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
    description: String
    locale: String
    name: String
    permissions: [ID]
    publishedAt: DateTime
    type: String
    users: [ID]
}

input UsersPermissionsUserFiltersInput {
    and: [UsersPermissionsUserFiltersInput]
    blocked: BooleanFilterInput
    confirmationToken: StringFilterInput
    confirmed: BooleanFilterInput
    createdAt: DateTimeFilterInput
    documentId: IDFilterInput
    email: StringFilterInput
    locale: StringFilterInput
    localizations: UsersPermissionsUserFiltersInput
    not: UsersPermissionsUserFiltersInput
    or: [UsersPermissionsUserFiltersInput]
    password: StringFilterInput
    provider: StringFilterInput
    publishedAt: DateTimeFilterInput
    resetPasswordToken: StringFilterInput
    role: UsersPermissionsRoleFiltersInput
    updatedAt: DateTimeFilterInput
    username: StringFilterInput
}

input UsersPermissionsUserInput {
    blocked: Boolean
    confirmationToken: String
    confirmed: Boolean
    email: String
    locale: String
    password: String
    provider: String
    publishedAt: DateTime
    resetPasswordToken: String
    role: ID
    username: String
}
